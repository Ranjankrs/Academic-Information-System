#include <iostream>
using namespace std;

class Node {
public:
    int roll;
    string name;
    string branch;
    int marks;
    Node* next;
};

Node* head = nullptr;

bool check(int x) {
    Node* temp = head;
    while (temp != nullptr) {
        if (temp->roll == x) {
            return true;
        }
        temp = temp->next;
    }
    return false;
}

void insert(int roll, string name, string branch, int marks) {
    if (check(roll)) {
        cout << "This data already exists.\n";
        return;
    }

    Node* t = new Node();
    t->roll = roll;
    t->name = name;
    t->branch = branch;
    t->marks = marks;
    t->next = nullptr;

    if (head == nullptr || head->roll >= t->roll) {
        t->next = head;
        head = t;
    } else {
        Node* c = head;
        while (c->next != nullptr && c->next->roll <= t->roll) {
            c = c->next;
        }
        t->next = c->next;
        c->next = t;
    }
    cout << "The data has been inserted.\n";
}

void search(int roll) {
    Node* p = head;
    while (p != nullptr) {
        if (p->roll == roll) {
            cout << "Roll Number: " << p->roll << endl;
            cout << "Name: " << p->name << endl;
            cout << "Branch: " << p->branch << endl;
            cout << "Marks: " << p->marks << endl;
            return;
        }
        p = p->next;
    }
    cout << "Data not found.\n";
}

void delete_record(int roll) {
    if (head == nullptr) {
        cout << "No records to delete.\n";
        return;
    }

    Node* t = head;
    Node* p = nullptr;

    if (t->roll == roll) {
        head = t->next;
        delete t;
        cout << "Record deleted.\n";
        return;
    }

    while (t != nullptr && t->roll != roll) {
        p = t;
        t = t->next;
    }

    if (t == nullptr) {
        cout << "Record not found.\n";
        return;
    }

    p->next = t->next;
    delete t;
    cout << "Record deleted.\n";
}

void show() {
    Node* p = head;
    if (p == nullptr) {
        cout << "No records available.\n";
    } else {
        cout << "Roll\tName\tBranch\tMarks\n";
        while (p != nullptr) {
            cout << p->roll << "\t" << p->name << "\t" << p->branch << "\t" << p->marks << endl;
            p = p->next;
        }
    }
}

int main() {
    string name, branch;
    int roll, marks;

    while (true) {
        cout << "\n\t\tWelcome to Academic Information System\n\n";
        cout << "\tPress\n\t1 to create a new Record\n\t2 to delete a student record\n";
        cout << "\t3 to Search a Student Record\n\t4 to view all student records\n\t5 to Exit\n";
        cout << "\nEnter your Choice: ";
        int Choice;
        cin >> Choice;

        if (Choice == 1) {
            cout << "Enter Name of Student: ";
            cin >> name;
            cout << "Enter Roll Number of Student: ";
            cin >> roll;
            cout << "Enter Branch of Student: ";
            cin >> branch;
            cout << "Enter Total Marks of Student: ";
            cin >> marks;
            insert(roll, name, branch, marks);
        } else if (Choice == 2) {
            cout << "Enter Roll Number of Student whose record is to be deleted: ";
            cin >> roll;
            delete_record(roll);
        } else if (Choice == 3) {
            cout << "Enter Roll Number of Student whose record you want to search: ";
            cin >> roll;
            search(roll);
        } else if (Choice == 4) {
            show();
        } else if (Choice == 5) {
            exit(0);
        } else {
            cout << "Invalid Choice. Try Again.\n";
        }
    }

    return 0;
}
